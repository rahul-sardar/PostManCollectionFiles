{
	"info": {
		"_postman_id": "073ca3a5-b80f-4b70-968c-fbb03a153150",
		"name": "TestAPIAtcollectionLevel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23211778"
	},
	"item": [
		{
			"name": "Get USER",
			"item": [
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var template = `",
									"    <table bgcolor=\"#FFFFFH\">",
									"        <tr bgcolor=\"#ff7f39\">  ",
									"            <th>ID</th>",
									"            <th>Name</th>",
									"            <th>Email</th>",
									"            <th>Gender</th>",
									"            <th>Status</th>",
									"        </tr>",
									"         {{#each response}}",
									"            <tr>",
									"                <td>{{id}}</td>",
									"                <td>{{name}}</td>",
									"                <td>{{email}}</td>",
									"                <td>{{gender}}</td>",
									"                <td>{{status}}</td>",
									"",
									"            </tr>",
									"        {{/each}}",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    response : pm.response.json()",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get a specific user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer e4b8e1f593dc4a731a153c5ec8cc9b8bbb583ae964ce650a741113091b4e2ac6",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Create User",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"subodh\",\n    \"email\" : \"{{$randomEmail}}\",\n    \"gender\" : \"male\",\n    \"status\" : \"active\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User - POST - Neagtive Tests",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Update User",
			"item": [
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{GlobalAuthTokenID}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{$randomEmail}}\",\n    \"name\": \"seleniumcypress\",\n    \"gender\": \"male\",\n    \"status\": \"active\"\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/public/v2/users/2832393",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"public",
								"v2",
								"users",
								"2832393"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Some User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer e4b8e1f593dc4a731a153c5ec8cc9b8bbb583ae964ce650a741113091b4e2ac6",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"status\": \"inactive\"\n   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/2671691",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"2671691"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Delete User",
			"item": [
				{
					"name": "Delete a User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer e4b8e1f593dc4a731a153c5ec8cc9b8bbb583ae964ce650a741113091b4e2ac6",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/2832393",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"2832393"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "API Workflow",
			"item": [
				{
					"name": "1 - create a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resData = pm.response.json();",
									"const userId = resData.id;",
									"console.log(\"user id ====>\" + userId);",
									"pm.variables.set(\"userId\", userId);",
									"",
									"//get name and email:",
									"const requestBody =JSON.parse(pm.request.body.raw);",
									"const name = requestBody.name;",
									"const emailId = requestBody.email;",
									"console.log(\"user name & email ====>\" + name + \":\" + emailId);",
									"pm.variables.set(\"emailId\", emailId);",
									"pm.variables.set(\"name\", name);",
									"",
									"",
									"// pm.test(\"Status code is 201\", function () {",
									"//     pm.response.to.have.status(201);",
									"// });",
									"//We wrote the test at collection level",
									"",
									"pm.test(\"check user name\", function () {",
									"    pm.expect(resData.name).to.eql(name);",
									"});",
									"",
									"pm.test(\"check user email\", function () {",
									"    pm.expect(resData.email).to.eql(emailId);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\" : \"subodh1\",\n    \"email\" : \"{{$randomEmail}}\",\n    \"gender\" : \"male\",\n    \"status\" : \"active\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/5573929",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"5573929"
							]
						}
					},
					"response": []
				},
				{
					"name": "2- Get the user after create",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resData = pm.response.json();",
									"",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"",
									"pm.test(\"check user name\", function () {",
									"    pm.expect(resData.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"",
									"pm.test(\"check user email\", function () {",
									"    pm.expect(resData.email).to.eql(pm.variables.get(\"emailId\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - update the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get status:",
									"const requestBody =JSON.parse(pm.request.body.raw);",
									"const status = requestBody.status;",
									"console.log(\"user updates status===> \"+ status);",
									"pm.variables.set(\"status\", status);",
									"",
									"",
									"const resData = pm.response.json();",
									"",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });//We wrote the test at collection level",
									"",
									"",
									"pm.test(\"check user name after update\", function () {",
									"    pm.expect(resData.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"",
									"pm.test(\"check user email after update\", function () {",
									"    pm.expect(resData.email).to.eql(pm.variables.get(\"emailId\"));",
									"});",
									"",
									"pm.test(\"check user status after update\", function () {",
									"    pm.expect(resData.status).to.eql(pm.variables.get(\"status\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n    \"status\" : \"inactive\"\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4- Get the user after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resData = pm.response.json();",
									"",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"//We wrote the test at collection level",
									"",
									"pm.test(\"check user name after update\", function () {",
									"    pm.expect(resData.name).to.eql(pm.variables.get(\"name\"));",
									"});",
									"",
									"pm.test(\"check user email after update\", function () {",
									"    pm.expect(resData.email).to.eql(pm.variables.get(\"emailId\"));",
									"});",
									"",
									"pm.test(\"check user status after update\", function () {",
									"    pm.expect(resData.status).to.eql(pm.variables.get(\"status\"));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.test(\"Status code is 204\", function () {",
									"//     pm.response.to.have.status(204);",
									"// });",
									"//We wrote the test at collection level",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5- Get the user after Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resData = pm.response.json();",
									"",
									"// pm.test(\"Status code is 404\", function () {",
									"//     pm.response.to.have.status(404);",
									"// });",
									"//We wrote the test at collection level",
									"",
									"pm.test(\"Get user after delete it should give Resource not found\", function () {",
									"    pm.expect(resData.message).to.eql(\"Resource not found\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{tokenId}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://gorest.co.in/public/v2/users/{{userId}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v2",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.request.method == 'GET' && pm.info.requestName != '5- Get the user after Delete'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"}",
					"",
					"if(pm.request.method == 'PUT' || pm.request.method == 'PATCH'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(200);",
					"    });",
					"}",
					"",
					"if(pm.request.method == 'POST'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(201);",
					"    });",
					"}",
					"",
					"if(pm.request.method == 'DELETE'){",
					"    pm.test(\"Status code is 200\", function () {",
					"        pm.response.to.have.status(204);",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "tokenId",
			"value": "Bearer e4b8e1f593dc4a731a153c5ec8cc9b8bbb583ae964ce650a741113091b4e2ac6",
			"type": "string"
		}
	]
}