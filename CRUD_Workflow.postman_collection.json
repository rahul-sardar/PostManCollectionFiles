{
	"info": {
		"_postman_id": "f82fcff8-7d59-4226-8702-99c932bd7710",
		"name": "CRUD Workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23211778"
	},
	"item": [
		{
			"name": "1 - Create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resData = pm.response.json();",
							"const userId = resData.id;",
							"console.log(\"user id ==>\" + userId);",
							"pm.variables.set(\"userId\", userId);",
							"",
							"",
							"//fetch request body data:",
							"//name and email",
							"const reuqestBody = JSON.parse(pm.request.body);",
							"const name = reuqestBody.name;",
							"const email = reuqestBody.email;",
							"console.log(\"user name & email id :===> \" + name + \":\" + email);",
							"//set name and email variables:",
							"pm.variables.set(\"name\", name);",
							"pm.variables.set(\"email\", email);",
							"",
							"",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"response should have correct name & email\", function () {",
							"    pm.expect(resData.name).to.eql(name);",
							"    pm.expect(resData.email).to.eql(email);",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\" : \"Ash\",\n    \"email\" : \"{{$randomEmail}}\",\n    \"gender\" : \"Female\",\n    \"status\" : \"active\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "2 - Get a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"check the name in the response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.variables.get(\"name\"));",
							"});",
							"",
							"pm.test(\"check the email in the response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"email\"));",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "3 - Update a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//fetch PUT request body data:",
							"//status",
							"const reuqestBody = JSON.parse(pm.request.body);",
							"const status = reuqestBody.status;",
							"console.log(\"PUT request status in the body: \" + status);",
							"",
							"pm.test(\"Check the updated status in response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.status).to.eql(status);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TokenID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"inactive\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "4 - Delete a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "5 - Get User after Delete Call",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"check resource not found after deleting the user with GET CALL\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Resource not found\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{TokenID}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/public/v2/users/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TokenID",
			"value": "Bearer 67cb3fd4f61e6cae4afc770a6dfdb9cdf127fb2ef302fc1b0dfd6b5ae8dab174",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "https://gorest.co.in/",
			"type": "string"
		}
	]
}